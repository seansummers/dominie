AWSTemplateFormatVersion: '2010-09-09'
Description: Re-enable CloudTrail when it is turned off.
Resources:
  AllowInvokeStopLoggingReEnable:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StopLoggingReEnable
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CallStopLoggingReEnableWithDetail.Arn
  CallStopLoggingReEnableWithDetail:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggers lambda when CloudTrail is turned off.
      EventPattern:
        detail:
          eventName:
          - StopLogging
          eventSource:
          - cloudtrail.amazonaws.com
        detail-type:
        - AWS API Call via CloudTrail
      State: ENABLED
      Targets:
      - Arn: !GetAtt StopLoggingReEnable.Arn
        Id: StopLoggingReEnable
        InputPath: $.detail
  StopLoggingReEnable:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import logging
          import boto3
          log = logging.getLogger()
          log_entry = "CloudTrail with ARN '{}' was automatically reenabled."
          start_logging = boto3.client('cloudtrail').start_logging
          def lambda_handler(event=None, context=None):
            # InputPath $.detail
            event_name = event['eventName']
            if event_name == 'StopLogging':
              cloud_trail_name = event['requestParameters']['name']
              start_logging(Name=cloud_trail_name)
              log.warn(log_entry.format(cloud_trail_name))
            else:
              log.error('Unknown event detail: {}'.format(event))
      Description: OIT InfoSec Auditing Suite
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt StopLoggingReEnableRole.Arn
      Runtime: python2.7
      Timeout: 2
  StopLoggingReEnableRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
      - PolicyName: CloudtrailStartLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: cloudtrail:StartLogging
            Resource: '*'
      Path: /infosec/
  FocusAWSLambdaBasicExecutionRole:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AWSLambdaBasicExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Deny
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          NotResource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StopLoggingReEnable}:*
      Roles: [!Ref StopLoggingReEnableRole]
  FocusAWSLambdaRole:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AWSLambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Deny
          Action: lambda:InvokeFunction
          NotResource: !GetAtt StopLoggingReEnable.Arn
      Roles: [!Ref StopLoggingReEnableRole]
