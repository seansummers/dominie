AWSTemplateFormatVersion: '2010-09-09'
Description: Shared Credentials KMS+DynamoDB service setup (credstash / unicreds)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Setup for Shared Credentials KMS+DynamoDB service (credstash / unicreds)
      Parameters:
      - KeyAlias
      - CredentialStore
      - CredentialAdmin
      - CredentialWriter
      - CredentialReader
    ParameterLabels:
      KeyAlias:
        default: 'Key Alias (-k for credstash):'
      CredentialStore:
        default: 'Credential Store (-t for credstash):'
      CredentialAdmin:
        default: 'Shared Credential Administration Role:'
      CredentialWriter:
        default: 'Shared Credential Writer Role:'
      CredentialReader:
        default: 'Shared Credential Reader Role:'
Parameters:
  KeyAlias:
    Type: String
    AllowedPattern: '[a-zA-Z0-9/_-]+'
    ConstraintDescription: Must match [a-zA-Z0-9/_-]+ and not start with aws.
    Default: credstash
    Description: Key Alias (-k for credstash)
  CredentialStore:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.-]+'
    ConstraintDescription: Must match [a-zA-Z0-9/_-]+.
    Default: credential-store
    Description: Credential Store (-t for credstash)
  CredentialAdmin:
    Type: String
    AllowedPattern: '|[a-zA-Z0-9+=,.@_/\-]{3,64}'
    Default: ''
    Description: Shared Credential Administration Role (preexisting)
  CredentialWriter:
    Type: String
    AllowedPattern: '|[a-zA-Z0-9+=,.@_/\-]{3,64}'
    Default: ''
    Description: Shared Credential Writer Role (preexisting)
  CredentialReader:
    Type: String
    AllowedPattern: '|[a-zA-Z0-9+=,.@_/\-]{3,64}'
    Default: ''
    Description: Shared Credential Reader Role (preexisting)
Conditions:
  HasAdmin: !Not [!Equals [!Ref CredentialAdmin, '']]
  HasWriter: !Not [!Equals [!Ref CredentialWriter, '']]
  HasReader: !Not [!Equals [!Ref CredentialReader, '']]
Resources:
  CredstashKey:
    Type: AWS::KMS::Key
    Properties:
      Description:
        !Sub
        - Shared Credential Key for ${KeyAlias}@${CredentialStore}
        - KeyAlias: !Ref KeyAlias
          CredentialStore: !Ref CredentialStore
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: Shared Credential Management
        Statement:
        - Sid: AdministerKMS
          Effect: Allow
          Principal:
            AWS:
            - !Sub
              - arn:aws:iam::${AWS::AccountId}:role/${Role}
              - Role: !ImportValue role-admin
            - !If
              - HasAdmin
              - !Sub
                - arn:aws:iam::${AWS::AccountId}:role/${Role}
                - Role: !Ref CredentialAdmin
              - !Ref 'AWS::NoValue'
          Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          Resource: '*'
        - Sid: AdministerSharedCredentials
          Effect: Allow
          Principal:
            AWS:
            - !Sub
              - arn:aws:iam::${AWS::AccountId}:role/${Role}
              - Role: !ImportValue role-admin
            - !If
              - HasAdmin
              - !Sub
                - arn:aws:iam::${AWS::AccountId}:role/${Role}
                - Role: !Ref CredentialAdmin
              - !Ref 'AWS::NoValue'
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: '*'
        - Sid: CreateDataKey
          Effect: Allow
          Principal:
            AWS:
            - !Sub
              - arn:aws:iam::${AWS::AccountId}:role/${Role}
              - Role: !ImportValue role-admin
            - !If
              - HasAdmin
              - !Sub
                - arn:aws:iam::${AWS::AccountId}:role/${Role}
                - Role: !Ref CredentialAdmin
              - !Ref 'AWS::NoValue'
            - !If
              - HasWriter
              - !Sub
                - arn:aws:iam::${AWS::AccountId}:role/${Role}
                - Role: !Ref CredentialWriter
              - !Ref 'AWS::NoValue'
          Action: kms:GenerateDataKey*
          Resource: '*'
        - Sid: DecryptUserKey
          Effect: Allow
          Principal:
            AWS:
            - !Sub
              - arn:aws:iam::${AWS::AccountId}:role/${Role}
              - Role: !ImportValue role-admin
            - !If
              - HasAdmin
              - !Sub
                - arn:aws:iam::${AWS::AccountId}:role/${Role}
                - Role: !Ref CredentialAdmin
              - !Ref 'AWS::NoValue'
            - !If
              - HasReader
              - !Sub
                - arn:aws:iam::${AWS::AccountId}:role/${Role}
                - Role: !Ref CredentialReader
              - !Ref 'AWS::NoValue'
          Action: kms:Decrypt
          Resource: '*'
  CredstashKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName:
        !Sub
        - alias/${KeyAlias}
        - KeyAlias: !Ref KeyAlias
      TargetKeyId: !Ref CredstashKey
  CredstashDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: name
        AttributeType: S
      - AttributeName: version
        AttributeType: S
      KeySchema:
      - AttributeName: name
        KeyType: HASH
      - AttributeName: version
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: !Ref CredentialStore
  AdminPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description:
        !Sub
        - Administrate Shared Credentials for ${KeyAlias}@${CredentialStore}
        - KeyAlias: !Ref KeyAlias
          CredentialStore: !Ref CredentialStore
      Path: /credstash/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: CreateDataKey
          Effect: Allow
          Action: kms:GenerateDataKey*
          Resource:
            !Sub
            - arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${CredstashKeyAlias}
            - CredstashKeyAlias: !Ref CredstashKeyAlias
        - Sid: StoreValue
          Effect: Allow
          Action: dynamodb:PutItem
          Resource:
            !Sub
            - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CredstashDB}
            - CredstashDB: !Ref CredstashDB
        - Sid: DecryptDataKey
          Effect: Allow
          Action: kms:Decrypt
          Resource:
            !Sub
            - arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${CredstashKeyAlias}
            - CredstashKeyAlias: !Ref CredstashKeyAlias
        - Sid: ReadValueOrWildcard
          Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
          Resource:
            !Sub
            - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CredstashDB}
            - CredstashDB: !Ref CredstashDB
      Roles:
      - !ImportValue role-admin
      - !If [HasAdmin, !Ref CredentialAdmin, !Ref 'AWS::NoValue']
  Writer:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description:
        !Sub
        - Write Shared Credentials for ${KeyAlias}@${CredentialStore}
        - KeyAlias: !Ref KeyAlias
          CredentialStore: !Ref CredentialStore
      Path: /credstash/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: CreateDataKey
          Effect: Allow
          Action: kms:GenerateDataKey*
          Resource:
            !Sub
            - arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${CredstashKeyAlias}
            - CredstashKeyAlias: !Ref CredstashKeyAlias
        - Sid: StoreValue
          Effect: Allow
          Action: dynamodb:PutItem
          Resource:
            !Sub
            - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CredstashDB}
            - CredstashDB: !Ref CredstashDB
      Roles:
      - !ImportValue role-admin
      - !If [HasAdmin, !Ref CredentialAdmin, !Ref 'AWS::NoValue']
      - !If [HasWriter, !Ref CredentialWriter, !Ref 'AWS::NoValue']
  Reader:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description:
        !Sub
        - Read Shared Credentials for ${KeyAlias}@${CredentialStore}
        - KeyAlias: !Ref KeyAlias
          CredentialStore: !Ref CredentialStore
      Path: /credstash/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: DecryptDataKey
          Effect: Allow
          Action: kms:Decrypt
          Resource:
            !Sub
            - arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${CredstashKeyAlias}
            - CredstashKeyAlias: !Ref CredstashKeyAlias
        - Sid: ReadValue
          Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:Query
          Resource:
            !Sub
            - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CredstashDB}
            - CredstashDB: !Ref CredstashDB
      Roles:
      - !ImportValue role-admin
      - !If [HasAdmin, !Ref CredentialAdmin, !Ref 'AWS::NoValue']
      - !If [HasReader, !Ref CredentialReader, !Ref 'AWS::NoValue']
