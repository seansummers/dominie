AWSTemplateFormatVersion: '2010-09-09'
Description: Credstash / Unicreds setup
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Setup for KMS (credstash / unicreds)
      Parameters:
      - KeyAlias
      - CredentialStore
      - AdminRole
      - SetterRole
      - GetterRole
    ParameterLabels:
      KeyAlias:
        default: 'Key Alias (-k for credstash):'
      CredentialStore:
        default: 'Credential Store (-t for credstash):'
      AdminRole:
        default: 'Role with administration rights:'
      SetterRole:
        default: 'Role with setting rights:'
      GetterRole:
        default: 'Role with getting rights:'
Parameters:
  KeyAlias:
    Type: String
    AllowedPattern: '[a-zA-Z0-9/_-]+'
    Default: credstash
    ConstraintDescription: Must match [a-zA-Z0-9/_-]+ and not start with aws.
    Description: Key Alias (-k for credstash)
  CredentialStore:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.-]+'
    Default: credential-store
    ConstraintDescription: 'Must match [a-zA-Z0-9/_-]+.'
    Description: Credential Store (-t for credstash)
  AdminRole:
    Type: String
    AllowedPattern: '[a-zA-Z0-9+=,.@_-/]{3,64}'
    Default: esu-admin
    Description: Role with administration rights.
  AdminRole:
    Type: String
    AllowedPattern: '[a-zA-Z0-9+=,.@_-/]{3,64}'
    Default: wse-admin
    Description: Role with administration rights.
  AdminRole:
    Type: String
    AllowedPattern: '[a-zA-Z0-9+=,.@_-/]{3,64}'
    Default: wse-role
    Description: Role with administration rights.
Resources:
  CredstashKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: Key for Credstash / Unicreds
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy: 
        Version: '2012-10-17'
        Id: Credstash management permissions
        Statement:
        - Sid: Allow administration of the KMS key
          Effect: Allow
          Principal: 
            AWS:
            - !Sub
              - arn:aws:iam::${AccountId}:role/superAdmin
              - AccountId: !Ref AWS::AccountId
            - !Sub
              - arn:aws:iam::${AccountId}:role/${AdminRole}
              - AccountId: !Ref AWS::AccountId
                AdminRole: !Ref AdminRole              
          Action: 
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          Resource: '*'
        - Sid: Allow use of the KMS key
          Effect: Allow
          Principal:
            AWS:
            - !Sub
              - arn:aws:iam::${AccountId}:role/superAdmin
              - AccountId: !Ref AWS::AccountId
            - !Sub
              - arn:aws:iam::${AccountId}:role/${AdminRole}
              - AccountId: !Ref AWS::AccountId
                AdminRole: !Ref AdminRole              
          Action: 
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: '*'
        - Sid: Allow putting credstash secrets
          Effect: Allow
          Principal:
            AWS:
            - !Sub
              - arn:aws:iam::${AccountId}:role/superAdmin
              - AccountId: !Ref AWS::AccountId
            - !Sub
              - arn:aws:iam::${AccountId}:role/${AdminRole}
              - AccountId: !Ref AWS::AccountId
                AdminRole: !Ref AdminRole              
          Action:
          - kms:GenerateDataKey*
          Resource: '*'
        - Sid: Allow getting credstash secrets
          Effect: Allow
          Principal:
            AWS:
            - !Sub
              - arn:aws:iam::${AccountId}:role/superAdmin
              - AccountId: !Ref AWS::AccountId
            - !Sub
              - arn:aws:iam::${AccountId}:role/${AdminRole}
              - AccountId: !Ref AWS::AccountId
                AdminRole: !Ref AdminRole              
          Action:
          - kms:Decrypt
          Resource: '*'          
  myKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName:
        !Sub
        - alias/${KeyAlias}
        - { KeyAlias: !Ref KeyAlias }
      TargetKeyId: !Ref CredstashKey
  myDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
      - AttributeName: name
        AttributeType: S
      - AttributeName: version
        AttributeType: S
      KeySchema:
      - AttributeName: name
        KeyType: HASH
      - AttributeName: version
        KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: !Ref CredentialStore
